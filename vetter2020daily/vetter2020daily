import os
import yaml
import pandas as pd
import numpy as np

os.getcwd()
os.chdir("/Users/wwww/shedding-hub/shedding-hub/data/Youwei")

df_1 = pd.read_csv("msphere.00827-20-st002.csv")

patient_info = {
    'P1': {'PatientID': 1, 'Sex': 'M', 'Age': 25},
    'P2': {'PatientID': 2, 'Sex': 'M', 'Age': 35},
    'P3': {'PatientID': 3, 'Sex': 'M', 'Age': 55},
    'P4': {'PatientID': 4, 'Sex': 'M', 'Age': 25},
    'P5': {'PatientID': 5, 'Sex': 'M', 'Age': 65}
}

def map_patient_info(df):
    df = df.copy()
    
    # Using .loc to ensure that the changes are done correctly on the DataFrame
    df.loc[:, 'PatientID'] = df['patient number'].map(lambda x: patient_info.get(x, {}).get('PatientID'))
    df.loc[:, 'Sex'] = df['patient number'].map(lambda x: patient_info.get(x, {}).get('Sex'))
    df.loc[:, 'Age'] = df['patient number'].map(lambda x: patient_info.get(x, {}).get('Age'))
    
    return df

df_1 = map_patient_info(df_1)
df_1.to_csv('vetter2020.csv', index=False)




Vetter2020 = pd.read_csv("vetter2020.csv")
Vetter2020 = Vetter2020.sort_values(by=['PatientID','dpo'])
Vetter2020 = Vetter2020.replace({"Sex": {"M": "male", "F": "female"}, 
                           "Virus isolation": {"yes": "virus isolated", "No": "virus unisolated", "n.d.": "not available"}})
Vetter2020.loc[Vetter2020['Log copies/ml'] == 'neg', 'Log copies/ml'] = 'negative'




participant_list = []

for i in pd.unique(Vetter2020["PatientID"]):
    patient_data = Vetter2020[Vetter2020["PatientID"] == i]
    age = int(patient_data['Age'].iloc[0])  # Convert to Python int
    sex = str(patient_data['Sex'].iloc[0])  # Convert to Python str
    
    measurements = []
    for _, row in patient_data.iterrows():
        measurements.append({
            "analyte": "nasopharyngeal_swab_SARSCoV2",
            "time": int(row['dpo']),  # Ensure it's a Python int
            "value": str(row['Log copies/ml'])  # Convert to string if not numeric
        })
        measurements.append({
            "analyte": "oropharyngeal_swab_SARSCoV2",
            "time": int(row['dpo']),  # Ensure it's a Python int
            "value": str(row['Log copies/ml'])  # Convert to string if not numeric
        })

    participant_dict = {
        "attributes": {
            "age": age,
            "sex": sex
        },
        "measurements": measurements
    }
    participant_list.append(participant_dict)

 
#functions to add folded blocks and literal blocks;

class folded_str(str): pass
class literal_str(str): pass

def folded_str_representer(dumper, data):
    return dumper.represent_scalar(u'tag:yaml.org,2002:str', data, style='>')
def literal_str_representer(dumper, data):
    return dumper.represent_scalar(u'tag:yaml.org,2002:str', data, style='|')

yaml.add_representer(folded_str, folded_str_representer)
yaml.add_representer(literal_str, literal_str_representer)



vetter2020 = dict(title="Daily Viral Kinetics and Innate and Adaptive Immune Response Assessment in COVID-19: a Case Series",
               doi="https://doi.org/10.1128/msphere.00827-20",
               description=folded_str('The author measured SARS-CoV-2 detected by real-time reverse transcriptase PCR in both the oropharyngeal swabs (OPS) and the nasopharyngeal swabs (NPS) of five COVID-19 patients, tracked from symptom onset up to 7 and 19 days post-onset, perspectively. Cellular and humoral severe acute respiratory syndrome (SARS)-CoV-2-specific adaptive responses are currently not included in this data.'),
               analytes=dict(NPS_SARSCoV2=dict(description=folded_str("SARS-CoV-2 RNA genome copy concentration in nasopharyngeal samples. The concentration were quantified in genome copies per milliliter."),
                                                    specimen="nasopharyngeal_swab",
                                                    biomarker="SARS-CoV-2",
                                                    gene_target="unknown",  
                                                    limit_of_quantification="unknown",
                                                    limit_of_detection="unknown",
                                                    unit="gc/mL",
                                                    reference_event="symptom onset"),
                             OPS_SARSCoV2=dict(description=folded_str("SARS-CoV-2 RNA genome copy concentration in oropharyngeal samples. The concentration were quantified in genome copies per milliliter."),
                                              specimen="oropharyngeal_swab",
                                              biomarker="SARS-CoV-2",
                                              limit_of_quantification="unkown",
                                              limit_of_detection="unknown",
                                              unit="gc/mL",
                                             reference_event="symptom onset")),
                             
               participants=participant_list)

with open("/Users/wwww/shedding-hub/shedding-hub/data/Youwei/Vetter2020Daily.yaml","w") as outfile:
    outfile.write("# yaml-language-server: $schema=.schema.yaml\n")
    yaml.dump(vetter2020, outfile, default_style=None, default_flow_style=False, sort_keys=False)
outfile.close() 